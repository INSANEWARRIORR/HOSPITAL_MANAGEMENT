1) Patient Structure:

→ This defines a structure named patient that represents information about a patient. It has member variables to store the patient's ID, first name, last name, age, blood group, gender, and a pointer next to the next patient in a linked list.


2) LinkedQueue Class:

→ This defines a class named linkedqueue, which represents a queue of patients. It contains two private member pointers head and last representing the first and last nodes in the linked list.
→ The constructor linkedqueue() initializes head and last to NULL.
→ The class also has member function prototypes for various operations on the queue, which will be defined later in the code.
→ It also has a public member variable departmentname to store the name of the department.

3) Search Function:

→ This is a member function of the linkedqueue class to search for a patient by their ID in the queue.
→ It takes an item (patient ID) as input and iterates through the linked list (head to last) to find the patient with the given ID.
→ If the patient is found, it returns true, indicating that the patient exists in the queue; otherwise, it returns false.

4) ReadNumber Function:

→ This function reads a number from the standard input stream (keyboard) as a string using getline() and then converts the string to an integer using atoi() function from the C standard library (cstdlib header) and returns the integer value.

5) Input Function:

→ This function is a member of the linkedqueue class and is responsible for taking input for a new patient and returning the patient as a patient structure.
→ It creates a new patient object using dynamic memory allocation (new).
→ The function takes various inputs from the user, including first name, last name, blood group, gender, age, and mobile number (ID).
→ The blood group is validated against valid values (A+, A-, B+, B-, O+, O-, AB+, AB-), and the user is prompted to enter again if an invalid blood group is provided.
→ The function then checks if the patient already exists in the queue using the search() function, and if so, it sets the patient ID to 0 to indicate an invalid data entry.
→ The patient details are returned as a patient structure.

6) Output Function:

→ This function takes a pointer to a patient object and displays the patient's details on the screen.

7) InsertAtBeg Function:

→ This function is a member of the linkedqueue class and inserts a new patient at the beginning of the queue.
→ It creates a new patient object using dynamic memory allocation and gets the patient's details using the input() function.
→ If the patient ID is 0 (which means an invalid data entry), it deletes the patient object and returns without adding the patient to the queue.
→ If the queue is empty, it sets both head and last to the new patient. Otherwise, it makes the new patient the head of the queue and updates the next pointer accordingly.

8) InsertAtEnd Function:

→ This function is a member of the linkedqueue class and inserts a new patient at the end of the queue.
→ It creates a new patient object using dynamic memory allocation and gets the patient's details using the input() function.
→ If the patient ID is 0 (which means an invalid data entry), it deletes the patient object and returns without adding the patient to the queue.
→ If the queue is empty, it sets both head and last to the new patient. Otherwise, it makes the new patient the last node in the queue and updates the next pointer of the previous last patient to point to the new patient.

9) GetPatientOut Function:

→ This function is a member of the linkedqueue class and removes the first patient from the queue.
→ If the queue is empty (head is NULL), it prints a message indicating there are no patients to operate on.
→ Otherwise, it removes the first patient by updating the head pointer to point to the next patient in the queue.
→ It then displays the details of the removed patient using the output() function and frees the memory allocated for the removed patient using delete.

10) ListOfPatients Function:

→ This function is a member of the linkedqueue class and displays the list of patients in the queue.
→ If the queue is empty (head is NULL), it prints a message indicating there are no patients in the queue.
→ Otherwise, it traverses the queue from the first patient to the last patient and displays the details of each patient using the output() function.


11) Main Function:

→ The main function initializes an array of linkedqueue objects, representing four different departments in the hospital.
→ It continuously displays the main menu, allowing the user to choose a department or exit the program.
→ If the user chooses a department, it calls the departmentmenu function to handle operations specific to that department.